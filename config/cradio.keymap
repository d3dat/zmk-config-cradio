// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&sk {
    quick-release;
    release-after-ms = <1000>;
};

&sl { release-after-ms = <1000>; };

&lt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <50>;
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        swap_win: swapper_win {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <13 15 16 17 18 19>;
        };

        swap_tab: swapper_tab {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_TAB";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;

            ignored-key-positions = <13 15 16 17 18 19>;
        };

        lt_sym_ru: lt_sym_ru {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SYM_RU";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&m_layer_sym>, <&m_to_en>;
        };

        lt_num: lt_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NUM";
            bindings = <&m_mo_num>, <&m_tog_num>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        lt_num_ru: lt_num_ru {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NUM_RU";
            bindings = <&m_mo_num_ru>, <&m_tog_num_ru>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        lt_esc: lt_esc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_ESC";
            bindings = <&mo>, <&m_esc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        tp_warpd_hint: tp_warpd_hint {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_WARPD_HINT";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&m_warpd_hint>, <&kp>;
        };

        tt: tt {
            compatible = "zmk,behavior-hold-tap";
            label = "TT";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&tog>, <&kp>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <17 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        st: st {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            label = "ST";
            bindings = <&ssk>, <&kp>;
        };

        lt_sup: lt_sup {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <7 16 17 18 19 6>;
            hold-trigger-on-release;
            label = "LT_SUP";
            bindings = <&mo>, <&kp>;
        };

        ssk: ssk {
            compatible = "zmk,behavior-sticky-key";
            label = "SSK";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <60000>;
            quick-release;
            ignore-modifiers;
        };

        hlt: hlt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            label = "HLT";
            bindings = <&mo>, <&kp>;
        };

        slt: slt {
            compatible = "zmk,behavior-hold-tap";
            label = "SLT";
            bindings = <&mo>, <&ssk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        lt_warpd_hint: lt_warpd_hint {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_WARPD_HINT";
            bindings = <&mo>, <&m_warpd_hint>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        lt_sym: lt_sym {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SYM";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&m_to_ru>;
        };
    };

    macros {
        m_en: m_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS>;
            label = "M_EN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_ru: m_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(CAPS)>;
            label = "M_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_to_en: macro_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &m_en>;
            label = "MACRO_EN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_to_ru: macro_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &m_ru>;
            label = "MACRO_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_kp_en: kp_en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&m_en &macro_param_1to1 &kp MACRO_PLACEHOLDER &m_ru>;
            label = "KP_EN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_comma: m_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "M_COMMA";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_comma_ru: m_comma_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH) &kp SPACE>;
            label = "M_COMMA_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_dot: m_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &ssk LSHFT>;
            label = "M_DOT";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_dot_ru: m_dot_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH &kp SPACE &ssk LSHFT>;
            label = "M_DOT_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_layer_sym: m_layer_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&m_en>,
                <&macro_press>,
                <&mo 0 &mo 8>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 8 &mo 0>,
                <&macro_tap>,
                <&m_ru>;

            label = "M_LAYER_SYM";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_layer_cmd: macro_layer_cmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&m_en>,
                <&macro_press>,
                <&mo 0 &mo 4>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4 &mo 0>,
                <&macro_tap>,
                <&m_ru>;

            label = "MACRO_LAYER_CMD";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_hint: macro_warpd_hint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F17 &tog 11>;
            label = "MACRO_WARPD_HINT";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_esc: macro_warpd_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &tog 11>;
            label = "MACRO_WARPD_ESC";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_click: macro_warpd_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &mkp LCLK &tog 11>;
            label = "MACRO_WARPD_CLICK";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_normal: macro_warpd_normal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F18 &tog 11>;
            label = "MACRO_WARPD_NORMAL";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_zed_1: macro_zed_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F3 &kp LA(UP) &kp DOWN>;
            label = "MACRO_ZED_1";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_caps_word: macro_caps_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHFT &caps_word>;
            label = "MACRO_CAPS_WORD";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_fn: macro_fn {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 10 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "MACRO_FN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_tog_num: tog_multi {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 6 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TOG_MULTI";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_tog_num_ru: tog_multi_ru {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 7 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TOG_MULTI_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_mo_num: mo_multi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 6>,
                <&macro_press>,
                <&mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>;

            label = "MO_MULTI";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_mo_num_ru: mo_multi_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 7>,
                <&macro_press>,
                <&mo 3>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3>;

            label = "MO_MULTI_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_esc: m_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp ESC>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp ESC &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;

            label = "M_ESC";
        };

        m_to_en_sup: m_to_en_sup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &m_en>, <&macro_press>, <&kp D>;

            label = "M_TO_EN_SUP";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_to_ru_sup: m_to_ru_sup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &m_ru>, <&macro_press>, <&kp D>;

            label = "M_TO_RU_SUP";
            wait-ms = <0>;
            tap-ms = <0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <>;
        };

        combo_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <>;
        };

        combo_spc {
            bindings = <&kp SPACE>;
            key-positions = <>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <>;
        };

        combo_mouse_l {
            bindings = <&tog 15>;
            key-positions = <>;
            layers = <2 3 0 1>;
        };

        combo_mouse_r {
            bindings = <&tog 15>;
            key-positions = <>;
            layers = <2 3 0 1>;
        };

        combo_bootloader_l {
            bindings = <&bootloader>;
            key-positions = <>;
        };

        combo_bootloader_r {
            bindings = <&bootloader>;
            key-positions = <>;
        };

        c_fn {
            bindings = <&mo 10>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        c_bootloader_l {
            bindings = <&bootloader>;
            key-positions = <0 10 20>;
        };

        c_bootloader_r {
            bindings = <&bootloader>;
            key-positions = <34 35 9 19 29>;
        };

        c_l_click {
            bindings = <&mkp LCLK>;
            key-positions = <3 13>;
        };

        c_scroll_up {
            bindings = <&msc SCRL_UP>;
            key-positions = <12 2>;
        };

        m_scroll_down {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <1 11>;
        };

        m_lclick_r {
            bindings = <&mkp LCLK>;
            key-positions = <6 16>;
        };

        c_scroll_up_r {
            bindings = <&msc SCRL_UP>;
            key-positions = <7 17>;
        };

        c_scroll_down_r {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <8 18>;
        };

        c_to_ru {
            bindings = <&m_to_ru>;
            key-positions = <>;
            layers = <0>;
        };

        c_to_en {
            bindings = <&m_to_en>;
            key-positions = <>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp Q  &kp W      &kp E      &kp R        &kp T           &kp Y        &kp U       &kp I      &kp O    &kp P
&kp A  &hlt 22 S  &hlt 16 D  &hlt 23 F    &kp G           &kp H        &kp J       &kp K      &kp L    &kp SEMI
&kp Z  &kp X      &kp C      &kp V        &kp B           &kp N        &kp M       &kp COMMA  &kp DOT  &kp FSLH
                             &lt 2 SPACE  &lt_esc 20 0    &lt_sym 8 0  &lt 15 RET
            >;

            display-name = "EN";
        };

        ru {
            bindings = <
&trans  &trans     &trans     &trans       &trans          &trans              &trans      &trans  &tp LBKT O  &tp LBKT P
&trans  &hlt 22 S  &hlt 17 D  &hlt 23 F    &trans          &trans              &trans      &trans  &trans      &tp SQT SEMI
&trans  &trans     &trans     &trans       &trans          &trans              &tp RBKT M  &trans  &trans      &trans
                              &lt 3 SPACE  &lt_esc 21 0    &lt_sym_ru 0 ENTER  &trans
            >;

            display-name = "RU";
        };

        nav {
            bindings = <
&m_to_ru      &kp BACKSPACE  &kp ESCAPE    &key_repeat   &kp RET      &kp INS        &kp HOME  &kp PG_UP  &kp PG_DN  &kp END
&sk LEFT_GUI  &sk LALT       &sk LCTRL     &sk LSHFT     &swap_win    &kp TAB        &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT
&kp LC(Z)     &kp LC(X)      &lt 20 LC(C)  &tt 10 LC(V)  &swap_tab    &kp BACKSPACE  &kp RET   &m_comma   &m_dot     &kp DEL
                                           &trans        &trans       &m_warpd_hint  &trans
            >;

            display-name = "NAV";
        };

        nav_ru {
            bindings = <
&m_to_en      &kp BACKSPACE  &kp ESCAPE    &key_repeat   &kp RET      &kp INS        &kp HOME  &kp PG_UP    &kp PG_DN  &kp END
&sk LEFT_GUI  &sk LALT       &sk LCTRL     &sk LSHFT     &swap_win    &kp TAB        &kp LEFT  &kp UP       &kp DOWN   &kp RIGHT
&kp LC(Z)     &kp LC(X)      &lt 21 LC(C)  &tt 10 LC(V)  &swap_tab    &kp BACKSPACE  &kp RET   &m_comma_ru  &m_dot_ru  &kp DEL
                                           &trans        &trans       &m_warpd_hint  &trans
            >;

            display-name = "NAV RU";
        };

        cmd {
            bindings = <
&none  &tog 12  &m_warpd_hint  &none      &none     &none   &none      &m_to_ru       &none     &none
&none  &none    &m_caps_word   &sk LSHFT  &none     &none   &sk RSHFT  &sk RCTRL      &sk LALT  &sk LGUI
&none  &none    &none          &none      &none     &none   &tog 12    &m_warpd_hint  &none     &none
                               &m_to_ru   &trans    &trans  &trans
            >;

            display-name = "CMD";
        };

        cmd_ru {
            bindings = <
&none  &tog 12  &m_warpd_hint  &none      &kp GRAVE    &none   &none      &m_to_en       &none     &none
&none  &none    &m_caps_word   &sk LSHFT  &none        &none   &sk LSHFT  &sk LCTRL      &sk LALT  &sk LGUI
&none  &none    &none          &none      &none        &none   &tog 12    &m_warpd_hint  &none     &none
                               &m_to_en   &trans       &trans  &trans
            >;

            display-name = "CMD RU";
        };

        num {
            bindings = <
&kp LS(N1)   &kp LS(N2)    &kp LS(N3)  &kp LS(N4)       &kp LS(N5)        &kp LS(N6)      &kp LS(N7)     &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
&kp N7       &kp N5        &kp N3      &kp N1           &kp N9            &kp N8          &kp N0         &kp N2      &kp N4      &kp N6
&kp PERCENT  &kp ASTERISK  &kp MINUS   &kp PLUS         &kp LT            &kp GT          &kp EQUAL      &kp COMMA   &kp DOT     &kp SLASH
                                       &lt_num 0 SPACE  &m_tog_num ESC    &m_tog_num RET  &kp BACKSPACE
            >;

            display-name = "NUM";
        };

        num_ru {
            bindings = <
&kp LS(N1)   &kp LS(N2)    &kp LS(N3)  &kp LS(N4)          &kp LS(N5)           &kp LS(N6)         &kp LS(N7)     &kp LS(N8)     &kp LS(N9)  &kp LS(N0)
&kp N7       &kp N5        &kp N3      &kp N1              &kp N9               &kp N8             &kp N0         &kp N2         &kp N4      &kp N6
&kp PERCENT  &kp ASTERISK  &kp MINUS   &kp PLUS            &m_kp_en LT          &m_kp_en GT        &kp EQUAL      &kp LS(SLASH)  &kp SLASH   &kp LS(BACKSLASH)
                                       &lt_num_ru 0 SPACE  &m_tog_num_ru ESC    &m_tog_num_ru RET  &kp BACKSPACE
            >;

            display-name = "NUM RU";
        };

        sym {
            bindings = <
&kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LT       &kp GT          &kp GRAVE        &kp SQT       &kp LPAR         &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp AMPERSAND   &kp HASH         &kp AT_SIGN  &kp PIPE        &kp TILDE        &kp PLUS      &kp MINUS        &kp DQT                &kp COLON         &kp SEMI
&kp PERCENT     &kp CARET        &kp DOLLAR   &kp UNDERSCORE  &kp BACKSLASH    &kp QUESTION  &kp EXCLAMATION  &kp COMMA              &kp DOT           &kp SLASH
                                              &trans          &trans           &trans        &trans
            >;

            display-name = "SYM";
        };

        sym_ru {
            bindings = <
&kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LT       &kp GT          &kp GRAVE        &kp SQT     &kp LPAR         &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp AMPERSAND   &kp HASH         &kp AT_SIGN  &kp PIPE        &kp TILDE        &kp PLUS    &kp MINUS        &kp LS(N2)             &kp LS(N6)        &kp LS(N4)
&kp PERCENT     &kp CARET        &kp DOLLAR   &kp UNDERSCORE  &kp BACKSLASH    &kp LS(N7)  &kp EXCLAMATION  &kp LS(SLASH)          &kp SLASH         &kp LS(BACKSLASH)
                                              &trans          &trans           &trans      &trans
            >;
        };

        fn {
            bindings = <
&none     &none     &none      &none      &none        &none      &m_fn F9  &m_fn F10  &m_fn F11  &m_fn F12
&sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &none        &none      &m_fn F5  &m_fn F6   &m_fn F7   &m_fn F8
&none     &none     &none      &none      &none        &none      &m_fn F1  &m_fn F2   &m_fn F3   &m_fn F4
                               &tog 10    &m_fn ESC    &m_fn RET  &tog 10
            >;

            display-name = "FN";
        };

        hint {
            bindings = <
&kp Q  &kp W  &kp E  &kp R   &kp T           &kp Y   &kp U           &kp I      &kp O       &kp P
&kp A  &kp S  &kp D  &kp F   &kp G           &kp H   &kp J           &kp K      &kp L       &kp SEMICOLON
&kp Z  &kp X  &kp C  &kp V   &kp B           &kp N   &kp M           &kp COMMA  &kp PERIOD  &kp SLASH
                     &trans  &m_warpd_esc    &trans  &m_warpd_click
            >;

            display-name = "HINT";
        };

        mouse {
            bindings = <
&msc SCRL_LEFT     &msc SCRL_DOWN     &msc SCRL_UP  &msc SCRL_RIGHT    &trans     &trans  &msc SCRL_LEFT    &msc SCRL_UP  &msc SCRL_DOWN    &msc SCRL_RIGHT
&mmv MOVE_X(-100)  &mmv MOVE_X(-600)  &mkp RCLK     &mkp LCLK          &trans     &trans  &mkp LCLK         &mkp RCLK     &mmv MOVE_X(600)  &mmv MOVE_X(100)
&trans             &kp LALT           &kp LCTRL     &kp LSHFT          &trans     &trans  &kp RSHFT         &kp RCTRL     &kp RALT          &trans
                                                    &mmv MOVE_Y(-600)  &tog 12    &none   &mmv MOVE_Y(600)
            >;

            display-name = "MOUSE";
        };

        sys {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;

            display-name = "SYS";
        };

        mouse_l {
            bindings = <
&msc SCRL_LEFT     &msc SCRL_DOWN    &msc SCRL_UP       &msc SCRL_RIGHT   &none      &none  &none      &none      &none      &none
&mmv MOVE_LEFT     &mmv MOVE_DOWN    &mmv MOVE_UP       &mmv MOVE_RIGHT   &none      &none  &mkp LCLK  &mkp RCLK  &mkp MB3   &m_warpd_hint
&mmv MOVE_X(-200)  &mmv MOVE_Y(200)  &mmv MOVE_Y(-200)  &mmv MOVE_X(200)  &none      &none  &mkp LCLK  &kp LSHFT  &kp LCTRL  &kp LALT
                                                        &m_warpd_hint     &kp ESC    &none  &none
            >;

            display-name = "MOUSE L";
        };

        mouse_r {
            bindings = <
&none          &none      &none      &none          &trans     &trans  &msc SCRL_LEFT     &msc SCRL_UP       &msc SCRL_DOWN    &msc SCRL_RIGHT
&m_warpd_hint  &mkp MB3   &mkp RCLK  &mkp LCLK      &trans     &trans  &mmv MOVE_LEFT     &mmv MOVE_UP       &mmv MOVE_DOWN    &mmv MOVE_RIGHT
&kp LALT       &kp LCTRL  &kp LSHFT  &mkp LCLK      &trans     &trans  &mmv MOVE_X(-200)  &mmv MOVE_Y(-200)  &mmv MOVE_Y(200)  &mmv MOVE_X(200)
                                     &m_warpd_hint  &kp ESC    &none   &none
            >;

            display-name = "MOUSE R";
        };

        sup {
            bindings = <
&trans    &trans     &trans  &trans     &trans     &none    &none          &kp ESC   &none    &none
&kp LALT  &kp LCTRL  &none   &kp LSHFT  &trans     &kp TAB  &kp BACKSPACE  &m_to_ru  &kp RET  &kp DEL
&trans    &trans     &trans  &trans     &trans     &none    &kp SPACE      &m_comma  &m_dot   &none
                             &none      &kp ESC    &trans   &m_warpd_hint
            >;

            display-name = "SUP";
        };

        sup_ru {
            bindings = <
&trans    &trans     &trans  &trans     &trans    &none    &none          &kp ESC      &none      &none
&kp LALT  &kp LCTRL  &none   &kp LSHFT  &trans    &kp TAB  &kp BACKSPACE  &m_to_en     &kp RET    &kp DEL
&trans    &trans     &trans  &trans     &trans    &none    &kp SPACE      &m_comma_ru  &m_dot_ru  &none
                             &none      &trans    &trans   &trans
            >;

            display-name = "SUP RU";
        };

        alt {
            bindings = <
&none  &none  &none  &none   &none     &kp TILDE     &kp EQUAL        &kp DQT    &kp HASH       &kp GRAVE
&none  &none  &none  &none   &none     &kp PLUS      &kp MINUS        &kp COLON  &kp SEMICOLON  &kp SQT
&none  &none  &none  &none   &none     &kp QUESTION  &kp EXCLAMATION  &trans     &trans         &trans
                     &trans  &trans    &trans        &trans
            >;

            display-name = "ALT";
        };

        alt_ru {
            bindings = <
&none  &none  &none  &none   &none     &kp GRAVE   &kp EQUAL        &kp LS(N2)     &kp LS(N3)  &kp LBKT
&none  &none  &none  &none   &none     &kp PLUS    &kp MINUS        &kp LS(N6)     &kp LS(N4)  &kp SQT
&none  &none  &none  &none   &none     &kp LS(N7)  &kp EXCLAMATION  &kp LS(SLASH)  &kp SLASH   &kp RBKT
                     &trans  &trans    &trans      &trans
            >;

            display-name = "ALT RU";
        };

        num_ {
            bindings = <
&none     &kp BACKSPACE  &kp ESC    &kp DEL     &none        &kp SLASH   &kp N9  &kp N0  &kp MINUS  &kp EQUAL
&kp LGUI  &kp LALT       &kp LCTRL  &kp LSHIFT  &kp EQUAL    &kp PERIOD  &kp N5  &kp N6  &kp N7     &kp N8
&kp LALT  &kp LCTRL      &none      &kp LSHIFT  &kp SPACE    &kp COMMA   &kp N1  &kp N2  &kp N3     &kp N4
                                    &trans      &trans       &trans      &trans
            >;

            display-name = "NUM_";
        };

        num_ru_ {
            bindings = <
&none     &kp BACKSPACE  &kp ESC    &kp DEL    &none        &kp LS(BACKSLASH)  &kp N9  &kp N0  &kp MINUS  &kp EQUAL
&kp LGUI  &kp LALT       &kp LCTRL  &kp LSHFT  &kp EQUAL    &kp SLASH          &kp N5  &kp N6  &kp N7     &kp N8
&kp LALT  &kp LCTRL      &none      &kp LSHFT  &kp SPACE    &kp LS(SLASH)      &kp N1  &kp N2  &kp N3     &kp N4
                                    &trans     &trans       &trans             &trans
            >;

            display-name = "NUM RU_";
        };

        mouse_ {
            bindings = <
&none     &none  &none      &none      &none     &none   &msc SCRL_LEFT  &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_RIGHT
&kp LALT  &none  &kp LCTRL  &kp LSHFT  &none     &none   &mkp LCLK       &mkp RCLK     &m_warpd_hint   &mkp MB3
&none     &none  &none      &none      &none     &none   &mmv MOVE_LEFT  &mmv MOVE_UP  &mmv MOVE_DOWN  &mmv MOVE_RIGHT
                            &trans     &trans    &trans  &trans
            >;
        };

        shift {
            bindings = <
&trans  &trans  &trans  &trans  &trans          &trans  &m_caps_word  &trans      &trans     &trans
&trans  &trans  &trans  &trans  &trans          &trans  &ssk LSHFT    &ssk LCTRL  &ssk LALT  &ssk LGUI
&trans  &trans  &trans  &trans  &trans          &trans  &trans        &trans      &trans     &trans
                        &trans  &kp K_CANCEL    &trans  &trans
            >;
        };
    };
};
